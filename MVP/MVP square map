"""
Auth: Cédric De Dryver, Andréas Bombaert,
Last Date: 08/11/2020

Desc: MVP du projet 2TI en python.
"""


#IMPORT SECTION
import curses


''' Class representing a score counter.

Auth: Cédric De Dryver
Last date: 

Score counter for a game of Pac Man.
'''
class ScoreCount:
    '''Initialization of the Class
    Variables: (Int) score => actual score of the running game.
    '''
    def __init__(self, score=0):
        self.__score = score

    '''GETTER
    POST: (Int)  => Return the actual score (int)
    '''
    @property
    def getScore(self):
        return self.__score

    '''ADDITION SCORE
    PRE :  (Int) ajout => points to addition to the score
    
    POST : (None)  => add points to the private variable score.
    '''
    def addScore(self, ajout):
        self.__score = self.__score + ajout


''' Script which initalizes a simple 2D array

Auth: Cédric De Dryver
Last date: November 09 2020 - 17h37

Script which initalizes a simple 2D array (10x20), and allows to know 
(later in the code) if there is an obstacle in front of the pacman
(function only MVP)

PRE: (None)

POST: (List of list)  => 2D array dimensions 10x20, with all obstacles
'''
def initMapBase():
    # Initialisation de la map et ses obstacle dans un tableau 2d
    map = 0
    x = 10
    y = 20
    map = [[0] * y for i in range(x)]
    for i in range(10):
        for j in range(20):
            if i == 0 or i == 9:
                map[i][j] = "MUR"
            if j == 0 or j == 19:
                map[i][j] = "MUR"
            if j == 1 and i != 0 and i != 9 or j == 18 and i != 0 and i != 9:
                map[i][j] = "PGN"
            if i == 1 and j != 0 and j != 19 or i == 8 and j != 0 and j != 19:
                map[i][j] = "PGN"
            map[1][1] = "PGS"
            map[1][18] = "PGS"
            map[8][18] = "PGS"
            map[8][1] = "PGS"
            map[5][10] = "FRUIT"
    return map


''' Script which initializes a simple playing field for PacMan with the Curses library

Auth: Cédric De Dryver
Last date : November 09 2020 - 17h32

PRE: (Instance) stdscr => instance of curses
     (Int) pos1 => position Y of PacMan
     (Int) pos2 => position X of PacMan
        
POST: None => create walls and collectables for pacman, via cruses
'''
def initTerrain(stdscr, pos1, pos2):
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK)

    # Initialisation de la map ( ici les 4 murs )
    for i in range(20):
        for j in range(10):
            try:
                stdscr.addstr(0, i, "#")  # Murs
                stdscr.addstr(j, 19, "#")
                stdscr.addstr(9, i, "#")
                stdscr.addstr(j, 0, "#")

            except:
                raise curses.error

    # Initialisation de la map (ici les collectables et le PacMan)
    for k in range(18):
        for l in range(8):
            try:
                stdscr.addstr(1, k + 1, "*", curses.color_pair(1))  # Pac Gommes de base
                stdscr.addstr(l + 1, 18, "*", curses.color_pair(1))
                stdscr.addstr(8, k + 1, "*", curses.color_pair(1))
                stdscr.addstr(l + 1, 1, "*", curses.color_pair(1))
                stdscr.addstr(1, 1, "x", curses.color_pair(1))  # Pac Gommes spéciale
                stdscr.addstr(1, 18, "x", curses.color_pair(1))
                stdscr.addstr(8, 1, "x", curses.color_pair(1))
                stdscr.addstr(8, 18, "x", curses.color_pair(1))
                stdscr.addstr(5, 10, "x", curses.color_pair(2))  # Fruit
                stdscr.addstr(pos1, pos2, "o", curses.color_pair(3))  # Pac Man
            except:
                raise curses.error


''' Main function
Auth: Cédric De Dryver,
Last date: November 09 2020 - 17h27

All lines have a step-by-step description in French.

But this main function allows you to play the simplified pac man game. the keys are Z: up, S: down, Q: left, D: right.
It's better with an AZERTY keyboard.
'''
def main(stdscr):

    # Initialisation de la library curse:
    curses.noecho()
    curses.cbreak()
    curses.curs_set(0)
    stdscr.keypad(True)
    curses.initscr()
    curses.start_color()

    # Position du PacMan et sa position précédente.
    pos_pacman = [4, 9]
    pos_prev= [4, 10]

    # Initialisation du score.
    score = ScoreCount()

    countColl = 49

    # Reset de l'affichage curses (au cas ou).
    stdscr.erase()

    # Initialisation de la carte
    map = initMapBase()

    # Initialisation du Terrain curses
    initTerrain(stdscr, pos_pacman[0], pos_pacman[1])

    '''
    Voici la boucle du jeu,
    pour quitter cette boucle, appuyez sur "p" ou rammassez tout les collectibles
    touches de mouvement:
    Z : Haut
    S : Bas
    Q : Gauche
    D : Droite
    '''
    while True:

        stdscr.delch(pos_prev[0], pos_prev[1])                                  #Suppression de la derniere position du PacMan
        stdscr.insstr(pos_prev[0], pos_prev[1], " ")                            #Ajout d'un blankspace afin de pas déséquilibrer les lignes
        stdscr.addstr(pos_pacman[0], pos_pacman[1], "o", curses.color_pair(3))  #Ajout de la position actuel du PacMan
        stdscr.addstr(1, 22, "Score: ", curses.color_pair(3))                   #Refreshing du score a chaques mouvement.
        stdscr.addstr(1, 29, str(score.getScore), curses.color_pair(3))
        stdscr.refresh()

        pos_prev[0] = pos_pacman[0]                                             #Copie de la position du PacMan avant déplacement
        pos_prev[1] = pos_pacman[1]


        # Si le compteur de collectible atteint 0, alors la partie est fini et affiche un ecran de victoire (Appuyer sur Q pour quitter cet ecran).
        if countColl == 0:
            stdscr.erase()
            gg = "You won ! Congratz"
            endmessage= "Press Q to quit the game"
            stdscr.addstr(1, 1, gg, curses.color_pair(3))
            stdscr.addstr(2, 1, "Score: ", curses.color_pair(3))
            stdscr.addstr(2, 7, str(score.getScore), curses.color_pair(3))
            stdscr.addstr(3, 1, endmessage, curses.color_pair(3))
            stdscr.refresh()

            key = stdscr.getch()

            if key == ord('q'):
                break


        # On va lire les touches que l'user va rentrer.
        key = stdscr.getch()

        # Reference : Haut(y => -∞) Bas(y => +∞) Gauche(x => -∞) Droite(x => +∞)
        # => : tend vers ...
        # Il y a sous ce commentaire,les 4 touches qui permettent de se déplacer.
        # A Chaques fois que le PacMan veut se déplacer, il verifie ce qu'il y a devant lui, et si il peut,
        # il se déplace et récupere des points (si il y en a)
        # Si l'user decide, il peut quitter le jeu en appuyant sur P (attention pas de verification).

        if key == ord('z'):
            if map[pos_pacman[0]-1][pos_pacman[1]] == "MUR":
                pass
            elif map[pos_pacman[0]-1][pos_pacman[1]] == "PGN":
                pos_pacman[0] = pos_pacman[0]-1
                countColl = countColl -1
                score.addScore(100)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]-1][pos_pacman[1]] == "PGS":
                pos_pacman[0] = pos_pacman[0] - 1
                countColl = countColl - 1
                score.addScore(200)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]-1][pos_pacman[1]] == "FRUIT":
                pos_pacman[0] = pos_pacman[0] - 1
                countColl = countColl - 1
                score.addScore(500)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]-1][pos_pacman[1]] == 0:
                pos_pacman[0] = pos_pacman[0] - 1

            stdscr.refresh()

        elif key == ord('s'):
            if map[pos_pacman[0]+1][pos_pacman[1]] == "MUR":
                pass
            elif map[pos_pacman[0]+1][pos_pacman[1]] == "PGN":
                pos_pacman[0] = pos_pacman[0] + 1
                countColl = countColl - 1
                score.addScore(100)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]+1][pos_pacman[1]] == "PGS":
                pos_pacman[0] = pos_pacman[0] + 1
                countColl = countColl - 1
                score.addScore(200)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]+1][pos_pacman[1]] == "FRUIT":
                pos_pacman[0] = pos_pacman[0] + 1
                countColl = countColl - 1
                score.addScore(500)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]+1][pos_pacman[1]] == 0:
                pos_pacman[0] = pos_pacman[0] + 1

            stdscr.refresh()

        elif key == ord('q'):

            if map[pos_pacman[0]][pos_pacman[1]-1] == "MUR":
                pass
            elif map[pos_pacman[0]][pos_pacman[1]-1] == "PGN":
                pos_pacman[1] = pos_pacman[1] - 1
                countColl = countColl - 1
                score.addScore(100)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]][pos_pacman[1]-1] == "PGS":
                pos_pacman[1] = pos_pacman[1] - 1
                countColl = countColl - 1
                score.addScore(200)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]][pos_pacman[1]-1] == "FRUIT":
                pos_pacman[1] = pos_pacman[1] - 1
                countColl = countColl - 1
                score.addScore(500)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]][pos_pacman[1]-1] == 0:
                pos_pacman[1] = pos_pacman[1] - 1

            stdscr.refresh()

        elif key == ord('d'):
            if map[pos_pacman[0]][pos_pacman[1]+1] == "MUR":
                pass
            elif map[pos_pacman[0]][pos_pacman[1]+1] == "PGN":
                pos_pacman[1] = pos_pacman[1] + 1
                countColl = countColl - 1
                score.addScore(100)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]][pos_pacman[1]+1] == "PGS":
                pos_pacman[1] = pos_pacman[1] + 1
                countColl = countColl - 1
                score.addScore(200)
                map[pos_pacman[0]][pos_pacman[1]] = 0
            elif map[pos_pacman[0]][pos_pacman[1]+1] == "FRUIT":
                pos_pacman[1] = pos_pacman[1] + 1
                countColl = countColl - 1
                score.addScore(500)
                map[pos_pacman[0]][pos_pacman[1]] = 0

            elif map[pos_pacman[0]][pos_pacman[1]+1] == 0:
                pos_pacman[1] = pos_pacman[1] + 1
            stdscr.refresh()


        elif key == ord('p'):
            break



if __name__ == "__main__" :
    curses.wrapper(main)
